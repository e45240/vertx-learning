/*
 * This file is generated by jOOQ.
 */
package com.e45240.test.tables.daos;


import com.e45240.test.tables.SysUser;
import com.e45240.test.tables.records.SysUserRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;


import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysUserDao extends AbstractReactiveVertxDAO<SysUserRecord, com.e45240.test.tables.pojos.SysUser, Integer, Single<List<com.e45240.test.tables.pojos.SysUser>>, Single<Optional<com.e45240.test.tables.pojos.SysUser>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<SysUserRecord,com.e45240.test.tables.pojos.SysUser,Integer> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public SysUserDao(Configuration configuration, io.reactiverse.reactivex.pgclient.PgClient delegate) {
        super(SysUser.SYS_USER, com.e45240.test.tables.pojos.SysUser.class, new ReactiveRXQueryExecutor<SysUserRecord,com.e45240.test.tables.pojos.SysUser,Integer>(configuration,delegate,com.e45240.test.tables.mappers.RowMappers.getSysUserMapper()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(com.e45240.test.tables.pojos.SysUser object) {
        return object.getId();
    }

    /**
     * Find records that have <code>username IN (values)</code> asynchronously
     */
    public Single<List<com.e45240.test.tables.pojos.SysUser>> findManyByUsername(List<String> values) {
        return findManyByCondition(SysUser.SYS_USER.USERNAME.in(values));
    }

    /**
     * Find records that have <code>telephone IN (values)</code> asynchronously
     */
    public Single<List<com.e45240.test.tables.pojos.SysUser>> findManyByTelephone(List<String> values) {
        return findManyByCondition(SysUser.SYS_USER.TELEPHONE.in(values));
    }

    /**
     * Find records that have <code>mail IN (values)</code> asynchronously
     */
    public Single<List<com.e45240.test.tables.pojos.SysUser>> findManyByMail(List<String> values) {
        return findManyByCondition(SysUser.SYS_USER.MAIL.in(values));
    }

    /**
     * Find records that have <code>password IN (values)</code> asynchronously
     */
    public Single<List<com.e45240.test.tables.pojos.SysUser>> findManyByPassword(List<String> values) {
        return findManyByCondition(SysUser.SYS_USER.PASSWORD.in(values));
    }

    /**
     * Find records that have <code>dept_id IN (values)</code> asynchronously
     */
    public Single<List<com.e45240.test.tables.pojos.SysUser>> findManyByDeptId(List<Integer> values) {
        return findManyByCondition(SysUser.SYS_USER.DEPT_ID.in(values));
    }

    /**
     * Find records that have <code>status IN (values)</code> asynchronously
     */
    public Single<List<com.e45240.test.tables.pojos.SysUser>> findManyByStatus(List<Integer> values) {
        return findManyByCondition(SysUser.SYS_USER.STATUS.in(values));
    }

    /**
     * Find records that have <code>remark IN (values)</code> asynchronously
     */
    public Single<List<com.e45240.test.tables.pojos.SysUser>> findManyByRemark(List<String> values) {
        return findManyByCondition(SysUser.SYS_USER.REMARK.in(values));
    }

    /**
     * Find records that have <code>operator IN (values)</code> asynchronously
     */
    public Single<List<com.e45240.test.tables.pojos.SysUser>> findManyByOperator(List<String> values) {
        return findManyByCondition(SysUser.SYS_USER.OPERATOR.in(values));
    }

    /**
     * Find records that have <code>operate_time IN (values)</code> asynchronously
     */
    public Single<List<com.e45240.test.tables.pojos.SysUser>> findManyByOperateTime(List<Timestamp> values) {
        return findManyByCondition(SysUser.SYS_USER.OPERATE_TIME.in(values));
    }

    /**
     * Find records that have <code>operate_ip IN (values)</code> asynchronously
     */
    public Single<List<com.e45240.test.tables.pojos.SysUser>> findManyByOperateIp(List<String> values) {
        return findManyByCondition(SysUser.SYS_USER.OPERATE_IP.in(values));
    }

    @Override
    public ReactiveRXQueryExecutor<SysUserRecord,com.e45240.test.tables.pojos.SysUser,Integer> queryExecutor(){
        return (ReactiveRXQueryExecutor<SysUserRecord,com.e45240.test.tables.pojos.SysUser,Integer>) super.queryExecutor();
    }
}
